generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Packages {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String   @unique
  price         Float
  duration      Int      @default(1)
  withdrawLimit Int
  description   String
  date          DateTime @default(now())
}

model Users {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  gender          String?
  age             DateTime?
  phone           String            @unique
  password        String
  device          String
  deviceId        String
  pushToken       String
  balance         Float             @default(0)
  name            String
  isAdmin         Boolean           @default(false)
  UserWallets     UserWallets[]
  withdrawHistory withdrawHistory[]
  watchHistory    watchHistory[]
  packageHistory  packageHistory[]
  rechargeHistory rechargeHistory[]
}

model Admin {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  creditPerMinutes Int    @default(1)
}

model AdminWallets {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  number   String
  date     DateTime @default(now())
  walletId String
}

model UserWallets {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  number           String
  walletHolderName String
  userId           String   @db.ObjectId
  user             Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date             DateTime @default(now())
  wallet           Json
}

model rechargeHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Int
  wallet      Json
  adminWallet Json
  status      String   @default("PENDING")
  date        DateTime @default(now())
  userId      String   @db.ObjectId
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model withdrawHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  wallet     Json
  userWallet Json
  status     String   @default("PENDING")
  date       DateTime @default(now())
  userId     String   @db.ObjectId
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model packageHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  package       Json
  price         Float
  duration      Int      @default(1)
  withdrawLimit Int
  date          DateTime @default(now())
  userId        String   @db.ObjectId
  user          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model videos {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  duration     Int
  videoUrl     String         @unique
  platformType String
  category     Json
  date         DateTime       @default(now())
  watchHistory watchHistory[]
}

model watchHistory {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId String   @db.ObjectId
  video   videos   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  date    DateTime @default(now())
  userId  String   @db.ObjectId
  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
